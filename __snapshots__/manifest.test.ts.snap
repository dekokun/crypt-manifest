// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snapshot test for k8s manifest ./charts/argocd 1`] = `
"---
# Source: argocd/charts/argo-cd/templates/argocd-application-controller/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: argocd-application-controller
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-application-controller
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: application-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
---
# Source: argocd/charts/argo-cd/templates/argocd-applicationset/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: 
metadata:
  name: argocd-snapshot-test-applicationset-controller
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-applicationset-controller
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: applicationset-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
---
# Source: argocd/charts/argo-cd/templates/argocd-notifications/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: 
metadata:
  name: argocd-notifications-controller
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-notifications-controller
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: notifications-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
---
# Source: argocd/charts/argo-cd/templates/argocd-repo-server/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: argocd-snapshot-test-repo-server
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-repo-server
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: repo-server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
---
# Source: argocd/charts/argo-cd/templates/argocd-server/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: argocd-server
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
---
# Source: argocd/charts/argo-cd/templates/argocd-configs/argocd-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: argocd-secret
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-secret
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
type: Opaque
---
# Source: argocd/charts/argo-cd/templates/argocd-notifications/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: argocd-snapshot-test-notifications-controller-secret
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-notifications-controller
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: notifications-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
type: Opaque
stringData:
---
# Source: argocd/charts/argo-cd/templates/argocd-configs/argocd-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
data:
    application.instanceLabelKey: argocd.argoproj.io/instance
    exec.enabled: \\"false\\"
    server.rbac.log.enforce.enable: \\"false\\"
    url: \\"\\"
---
# Source: argocd/charts/argo-cd/templates/argocd-configs/argocd-gpg-keys-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-gpg-keys-cm
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
  name: argocd-gpg-keys-cm
---
# Source: argocd/charts/argo-cd/templates/argocd-configs/argocd-rbac-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-rbac-cm
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-rbac-cm
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
---
# Source: argocd/charts/argo-cd/templates/argocd-configs/argocd-ssh-known-hosts-cm.yaml
apiVersion: v1
data:
  ssh_known_hosts: |
    bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
    github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
    github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
    github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
    gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
    gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf
    gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9
    ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
    vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
kind: ConfigMap
metadata:
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-ssh-known-hosts-cm
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
  name: argocd-ssh-known-hosts-cm
---
# Source: argocd/charts/argo-cd/templates/argocd-configs/argocd-tls-certs-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-tls-certs-cm
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
  name: argocd-tls-certs-cm
---
# Source: argocd/charts/argo-cd/templates/argocd-notifications/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-snapshot-test-notifications-controller-cm
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-notifications-controller
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: notifications-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
data:
  context: |
    argocdUrl:
---
# Source: argocd/templates/mackerel_conf.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mackerel
data:
  config: |
    plugin:
      metrics:
        prome:
          command:
            - \\"/bin/sh\\"
            - \\"-c\\"
            - \\"mackerel-plugin-prometheus-exporter --target http://argocd-application-controller-metrics.argocd.svc.cluster.local:8082/metrics | grep argocd_app_info | sed 's/argocd_app_info-dest_namespace_//g' | sed 's/dest_server_https_kubernetes_default_svc_//g' | sed 's/operation_project_default_repo_https_github_com_dekokun_crypt-manifest_//g' | sed 's/sync_status_//g'\\"
          timeoutSeconds: 30
---
# Source: argocd/charts/argo-cd/templates/argocd-application-controller/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argocd-snapshot-test-application-controller
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-application-controller
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: application-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - '*'
- nonResourceURLs:
  - '*'
  verbs:
  - '*'
---
# Source: argocd/charts/argo-cd/templates/argocd-server/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argocd-snapshot-test-server
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
rules:
  - apiGroups:
      - '*'
    resources:
      - '*'
    verbs:
      - delete
      - get
      - patch
  - apiGroups:
      - \\"\\"
    resources:
      - events
    verbs:
      - list
  - apiGroups:
      - \\"\\"
    resources:
      - pods
      - pods/log
    verbs:
      - get
---
# Source: argocd/charts/argo-cd/templates/argocd-application-controller/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argocd-snapshot-test-application-controller
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-application-controller
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: application-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argocd-snapshot-test-application-controller
subjects:
- kind: ServiceAccount
  name: argocd-application-controller
  namespace: default
---
# Source: argocd/charts/argo-cd/templates/argocd-server/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argocd-snapshot-test-server
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argocd-snapshot-test-server
subjects:
- kind: ServiceAccount
  name: argocd-server
  namespace: default
---
# Source: argocd/charts/argo-cd/templates/argocd-application-controller/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argocd-snapshot-test-application-controller
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-application-controller
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: application-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
rules:
- apiGroups:
  - \\"\\"
  resources:
  - secrets
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - argoproj.io
  resources:
  - applications
  - appprojects
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
- apiGroups:
  - \\"\\"
  resources:
  - events
  verbs:
  - create
  - list
---
# Source: argocd/charts/argo-cd/templates/argocd-applicationset/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argocd-snapshot-test-applicationset-controller
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-applicationset-controller
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: applicationset-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
rules:
  - apiGroups:
    - argoproj.io
    resources:
    - applications
    - appprojects
    - applicationsets
    - applicationsets/finalizers
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - argoproj.io
    resources:
    - applicationsets/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - \\"\\"
    resources:
    - events
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - \\"\\"
    resources:
    - secrets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - \\"\\"
    resources:
    - configmaps
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - apps
    - extensions
    resources:
    - deployments
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
---
# Source: argocd/charts/argo-cd/templates/argocd-notifications/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argocd-snapshot-test-notifications-controller
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-notifications-controller
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: notifications-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
rules:
- apiGroups:
  - argoproj.io
  resources:
  - applications
  - appprojects
  verbs:
  - get
  - list
  - watch
  - update
  - patch
- apiGroups:
  - \\"\\"
  resources:
  - configmaps
  - secrets
  verbs:
  - list
  - watch
- apiGroups:
  - \\"\\"
  resourceNames:
  - argocd-snapshot-test-notifications-controller-cm
  resources:
  - configmaps
  verbs:
  - get
- apiGroups:
  - \\"\\"
  resourceNames:
  - argocd-snapshot-test-notifications-controller-secret
  resources:
  - secrets
  verbs:
  - get
---
# Source: argocd/charts/argo-cd/templates/argocd-repo-server/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argocd-snapshot-test-repo-server
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-repo-server
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: repo-server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
rules:
---
# Source: argocd/charts/argo-cd/templates/argocd-server/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argocd-snapshot-test-server
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
rules:
- apiGroups:
  - \\"\\"
  resources:
  - secrets
  - configmaps
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
- apiGroups:
  - argoproj.io
  resources:
  - applications
  - appprojects
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - delete
  - patch
- apiGroups:
  - \\"\\"
  resources:
  - events
  verbs:
  - create
  - list
---
# Source: argocd/charts/argo-cd/templates/argocd-application-controller/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argocd-snapshot-test-application-controller
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-application-controller
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: application-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: argocd-snapshot-test-application-controller
subjects:
- kind: ServiceAccount
  name: argocd-application-controller
  namespace: default
---
# Source: argocd/charts/argo-cd/templates/argocd-applicationset/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argocd-snapshot-test-applicationset-controller
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-applicationset-controller
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: applicationset-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: argocd-snapshot-test-applicationset-controller
subjects:
  - kind: ServiceAccount
    name: argocd-snapshot-test-applicationset-controller
    namespace: default
---
# Source: argocd/charts/argo-cd/templates/argocd-notifications/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argocd-snapshot-test-notifications-controller
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-notifications-controller
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: notifications-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: argocd-snapshot-test-notifications-controller
subjects:
  - kind: ServiceAccount
    name: argocd-notifications-controller
    namespace: default
---
# Source: argocd/charts/argo-cd/templates/argocd-repo-server/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argocd-snapshot-test-repo-server
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-repo-server
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: repo-server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: argocd-snapshot-test-repo-server
subjects:
- kind: ServiceAccount
  name: argocd-snapshot-test-repo-server
  namespace: default
---
# Source: argocd/charts/argo-cd/templates/argocd-server/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argocd-snapshot-test-server
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: argocd-snapshot-test-server
subjects:
- kind: ServiceAccount
  name: argocd-server
  namespace: default
---
# Source: argocd/charts/argo-cd/templates/argocd-application-controller/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-metrics
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: application-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
  name: argocd-snapshot-test-application-controller-metrics
spec:
  ports:
  - name: http-metrics
    protocol: TCP
    port: 8082
    targetPort: controller
  selector:
    app.kubernetes.io/name: argocd-application-controller
    app.kubernetes.io/instance: argocd-snapshot-test
---
# Source: argocd/charts/argo-cd/templates/argocd-application-controller/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: argocd-snapshot-test-application-controller
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-application-controller
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: application-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
spec:
  ports:
  - name: https-controller
    port: 8082
    targetPort: 8082
  selector:
    app.kubernetes.io/name: argocd-application-controller
    app.kubernetes.io/instance: argocd-snapshot-test
---
# Source: argocd/charts/argo-cd/templates/argocd-applicationset/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: argocd-snapshot-test-applicationset-controller
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-applicationset-controller
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: applicationset-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
spec:
  ports:
  - name: webhook
    port: 7000
    targetPort: webhook
  selector:
    app.kubernetes.io/name: argocd-applicationset-controller
    app.kubernetes.io/instance: argocd-snapshot-test
---
# Source: argocd/charts/argo-cd/templates/argocd-repo-server/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-repo-server
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: repo-server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
  name: argocd-snapshot-test-repo-server
spec:
  ports:
  - name: https-repo-server
    protocol: TCP
    port: 8081
    targetPort: repo-server
  selector:
    app.kubernetes.io/name: argocd-repo-server
    app.kubernetes.io/instance: argocd-snapshot-test
---
# Source: argocd/charts/argo-cd/templates/argocd-server/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: argocd-snapshot-test-server
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
spec:
  type: ClusterIP
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: server
  - name: https
    protocol: TCP
    port: 443
    targetPort: server
  selector:
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/instance: argocd-snapshot-test
---
# Source: argocd/charts/argo-cd/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: argocd-snapshot-test-redis
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-redis
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: redis
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
spec:
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
  selector:
    app.kubernetes.io/name: argocd-redis
    app.kubernetes.io/instance: argocd-snapshot-test
---
# Source: argocd/charts/argo-cd/templates/argocd-applicationset/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-snapshot-test-applicationset-controller
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-applicationset-controller
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: applicationset-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/version: \\"v0.4.0\\"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-applicationset-controller
      app.kubernetes.io/instance: argocd-snapshot-test
  template:
    metadata:
      labels:
        helm.sh/chart: argo-cd-4.9.12
        app.kubernetes.io/name: argocd-applicationset-controller
        app.kubernetes.io/instance: argocd-snapshot-test
        app.kubernetes.io/component: applicationset-controller
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: argocd
        app.kubernetes.io/version: \\"v0.4.0\\"
    spec:
      serviceAccountName: argocd-snapshot-test-applicationset-controller
      securityContext:
        {}
      containers:
        - name: applicationset-controller
          securityContext:
            {}
          command:
            - entrypoint.sh
            - argocd-applicationset-controller
            - --metrics-addr=:8080
            - --probe-addr=:8081
            - --namespace=default
            - --argocd-repo-server=argocd-snapshot-test-repo-server:8081
            - --policy=sync
            - --debug=false
            - --dry-run=false
          image: ghcr.io/jr64/argocd-applicationset:v0.4.0
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8081
              protocol: TCP
            - name: metrics
              containerPort: 8080
              protocol: TCP
            - name: webhook
              containerPort: 7000
              protocol: TCP
          resources:
            {}
          volumeMounts:
            - mountPath: /tmp
              name: tmp-dir
            - mountPath: /app/config/ssh
              name: ssh-known-hosts
            - mountPath: /app/config/tls
              name: tls-certs
            - mountPath: /app/config/gpg/source
              name: gpg-keys
            - mountPath: /app/config/gpg/keys
              name: gpg-keyring
      volumes:
      - emptyDir: {}
        name: tmp-dir
      - configMap:
          name: argocd-ssh-known-hosts-cm
        name: ssh-known-hosts
      - configMap:
          name: argocd-tls-certs-cm
        name: tls-certs
      - configMap:
          name: argocd-gpg-keys-cm
        name: gpg-keys
      - emptyDir: {}
        name: gpg-keyring
---
# Source: argocd/charts/argo-cd/templates/argocd-notifications/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-snapshot-test-notifications-controller
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-notifications-controller
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: notifications-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/version: \\"v2.4.4\\"
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-notifications-controller
      app.kubernetes.io/instance: argocd-snapshot-test
  template:
    metadata:
      labels:
        helm.sh/chart: argo-cd-4.9.12
        app.kubernetes.io/name: argocd-notifications-controller
        app.kubernetes.io/instance: argocd-snapshot-test
        app.kubernetes.io/component: notifications-controller
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: argocd
        app.kubernetes.io/version: \\"v2.4.4\\"
    spec:
      serviceAccountName: argocd-notifications-controller
      securityContext:
        runAsNonRoot: true
      containers:
        - name: notifications-controller
          image: quay.io/argoproj/argocd:v2.4.4
          imagePullPolicy: IfNotPresent
          resources:
            {}
          command:
            - argocd-notifications
            - --loglevel=info
            - --logformat=text
            - --namespace=default
            - --argocd-repo-server=argocd-snapshot-test-repo-server:8081
            - --secret-name=argocd-snapshot-test-notifications-controller-secret
            - --config-map-name=argocd-snapshot-test-notifications-controller-cm
          workingDir: /app
          ports:
          volumeMounts:
            - name: tls-certs
              mountPath: /app/config/tls
            - name: argocd-repo-server-tls
              mountPath: /app/config/reposerver/tls
      volumes:
        - configMap:
            name: argocd-tls-certs-cm
          name: tls-certs
        - name: argocd-repo-server-tls
          secret:
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-repo-server-tls
---
# Source: argocd/charts/argo-cd/templates/argocd-repo-server/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-snapshot-test-repo-server
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-repo-server
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: repo-server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/version: \\"v2.4.4\\"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-repo-server
      app.kubernetes.io/instance: argocd-snapshot-test
  revisionHistoryLimit: 5
  replicas: 1
  template:
    metadata:
      labels:
        helm.sh/chart: argo-cd-4.9.12
        app.kubernetes.io/name: argocd-repo-server
        app.kubernetes.io/instance: argocd-snapshot-test
        app.kubernetes.io/component: repo-server
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: argocd
        app.kubernetes.io/version: \\"v2.4.4\\"
    spec:
      containers:
      - name: repo-server
        image: quay.io/argoproj/argocd:v2.4.4
        imagePullPolicy: IfNotPresent
        command:
        - entrypoint.sh
        args:
        - argocd-repo-server
        - --redis
        - argocd-snapshot-test-redis:6379
        - --logformat
        - text
        - --loglevel
        - info
        env:
        - name: HELM_CACHE_HOME
          value: /helm-working-dir
        - name: HELM_CONFIG_HOME
          value: /helm-working-dir
        - name: HELM_DATA_HOME
          value: /helm-working-dir
        
        volumeMounts:
        - mountPath: /app/config/gpg/source
          name: gpg-keys
        - mountPath: /app/config/gpg/keys
          name: gpg-keyring
        - mountPath: /app/config/ssh
          name: ssh-known-hosts
        - mountPath: /app/config/tls
          name: tls-certs
        - mountPath: /app/config/reposerver/tls
          name: argocd-repo-server-tls
        - mountPath: /tmp
          name: tmp-dir
        - mountPath: /helm-working-dir
          name: helm-working-dir
        - mountPath: /home/argocd/cmp-server/plugins
          name: plugins
        ports:
        - name: repo-server
          containerPort: 8081
          protocol: TCP
        
        livenessProbe:
          tcpSocket:
            port: 8081
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          tcpSocket:
            port: 8081
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        resources:
          {}
      serviceAccountName: argocd-snapshot-test-repo-server
      volumes:
      - name: gpg-keys
        configMap:
          name: argocd-gpg-keys-cm
      - emptyDir: {}
        name: gpg-keyring
      - configMap:
          name: argocd-ssh-known-hosts-cm
        name: ssh-known-hosts
      - configMap:
          name: argocd-tls-certs-cm
        name: tls-certs
      - name: helm-working-dir
        emptyDir: {}
      - name: argocd-repo-server-tls
        secret:
          items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
          - key: ca.crt
            path: ca.crt
          optional: true
          secretName: argocd-repo-server-tls
      - emptyDir: {}
        name: tmp-dir
      - emptyDir: {}
        name: var-files
      - emptyDir: {}
        name: plugins
      initContainers:
      - command:
        - cp
        - -n
        - /usr/local/bin/argocd
        - /var/run/argocd/argocd-cmp-server
        image: quay.io/argoproj/argocd:v2.4.4
        imagePullPolicy: IfNotPresent
        name: copyutil
        resources:
          {}
        volumeMounts:
        - mountPath: /var/run/argocd
          name: var-files
---
# Source: argocd/charts/argo-cd/templates/argocd-server/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-snapshot-test-server
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/version: \\"v2.4.4\\"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-server
      app.kubernetes.io/instance: argocd-snapshot-test
  revisionHistoryLimit: 5
  replicas: 1
  template:
    metadata:
      labels:
        helm.sh/chart: argo-cd-4.9.12
        app.kubernetes.io/name: argocd-server
        app.kubernetes.io/instance: argocd-snapshot-test
        app.kubernetes.io/component: server
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: argocd
        app.kubernetes.io/version: \\"v2.4.4\\"
    spec:
      containers:
      - name: server
        image: quay.io/argoproj/argocd:v2.4.4
        imagePullPolicy: IfNotPresent
        command:
        - argocd-server
        
        - --staticassets
        - /shared/app
        
        - --repo-server
        - argocd-snapshot-test-repo-server:8081
        - --logformat
        - text
        - --loglevel
        - info
        - --redis
        - argocd-snapshot-test-redis:6379
        - --insecure
        volumeMounts:
        - mountPath: /app/config/ssh
          name: ssh-known-hosts
        - mountPath: /app/config/tls
          name: tls-certs
        - mountPath: /app/config/server/tls
          name: argocd-repo-server-tls
        - mountPath: /home/argocd
          name: plugins-home
        - mountPath: /tmp
          name: tmp-dir
        ports:
        - name: server
          containerPort: 8080
          protocol: TCP
        
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        resources:
          {}
      nodeSelector:
        kubernetes.io/arch: arm64
      serviceAccountName: argocd-server
      volumes:
      - emptyDir: {}
        name: tmp-dir
      - configMap:
          name: argocd-ssh-known-hosts-cm
        name: ssh-known-hosts
      - configMap:
          name: argocd-tls-certs-cm
        name: tls-certs
      - name: argocd-repo-server-tls
        secret:
          items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
          - key: ca.crt
            path: ca.crt
          optional: true
          secretName: argocd-repo-server-tls
      - emptyDir: {}
        name: plugins-home
---
# Source: argocd/charts/argo-cd/templates/redis/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-snapshot-test-redis
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-redis
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: redis
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/version: \\"7.0.0-alpine\\"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-redis
  template:
    metadata:
      labels:
        helm.sh/chart: argo-cd-4.9.12
        app.kubernetes.io/name: argocd-redis
        app.kubernetes.io/instance: argocd-snapshot-test
        app.kubernetes.io/component: redis
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: argocd
        app.kubernetes.io/version: \\"7.0.0-alpine\\"
    spec:
      automountServiceAccountToken: false
      serviceAccountName: default
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      containers:
      - name: argocd-snapshot-test-redis
        args:
        - --save
        - \\"\\"
        - --appendonly
        - \\"no\\"
        image: redis:7.0.0-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 6379
          name: redis
        resources:
          {}
      nodeSelector:
        kubernetes.io/arch: arm64
---
# Source: argocd/templates/mackerel.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mackerel-deployment
  labels:
    app: mackerel
  annotations:
    reloader.stakater.com/auto: \\"true\\"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mackerel
  template:
    metadata:
      labels:
        app: mackerel
    spec:
      containers:
      - name: mackerel
        image: mackerel/mackerel-container-agent:plugins
        resources:
          requests:
            cpu: 0.004
            memory: 17Mi
          limits:
            memory: 128Mi
        env:
        - name: MACKEREL_KUBERNETES_KUBELET_READ_ONLY_PORT
          value: '0'
        - name: MACKEREL_CONTAINER_PLATFORM
          value: kubernetes
        - name: MACKEREL_HOST_STATUS_ON_START
          value: working
        - name: MACKEREL_AGENT_CONFIG
          value: /etc/mackerel/config
        - name: MACKEREL_KUBERNETES_KUBELET_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: MACKEREL_KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MACKEREL_KUBERNETES_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MACKEREL_ROLES
          value: bitcoin:argocd
        - name: MACKEREL_APIKEY
          valueFrom:
            secretKeyRef:
              name: mackerel
              key: apikey
        volumeMounts:
          - mountPath: \\"/etc/mackerel\\"
            name: mackerel-config
            readOnly: true
        lifecycle:
          postStart:
            exec:
              command:
                - mkr
                - plugin
                - install
                - k1LoW/mackerel-plugin-prometheus-exporter
      volumes:
        - name: mackerel-config
          configMap:
            name: mackerel
            items:
              - key: config
                path: config
---
# Source: argocd/charts/argo-cd/templates/argocd-application-controller/deployment.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: argocd-snapshot-test-application-controller
  labels:
    helm.sh/chart: argo-cd-4.9.12
    app.kubernetes.io/name: argocd-application-controller
    app.kubernetes.io/instance: argocd-snapshot-test
    app.kubernetes.io/component: application-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/version: \\"v2.4.4\\"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-application-controller
      app.kubernetes.io/instance: argocd-snapshot-test
  serviceName: argocd-snapshot-test-application-controller
  revisionHistoryLimit: 5
  replicas: 1
  template:
    metadata:
      labels:
        helm.sh/chart: argo-cd-4.9.12
        app.kubernetes.io/name: argocd-application-controller
        app.kubernetes.io/instance: argocd-snapshot-test
        app.kubernetes.io/component: application-controller
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: argocd
        app.kubernetes.io/version: \\"v2.4.4\\"
    spec:
      containers:
      - command:
        - argocd-application-controller
        - --status-processors
        - \\"20\\"
        - --operation-processors
        - \\"10\\"
        - --app-resync
        - \\"180\\"
        - --self-heal-timeout-seconds
        - \\"5\\"
        - --repo-server
        - argocd-snapshot-test-repo-server:8081
        - --repo-server-timeout-seconds
        - \\"60\\"
        - --logformat
        - text
        - --loglevel
        - info
        - --redis
        - argocd-snapshot-test-redis:6379
        image: quay.io/argoproj/argocd:v2.4.4
        imagePullPolicy: IfNotPresent
        name: application-controller
        ports:
        - name: controller
          containerPort: 8082
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8082
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          tcpSocket:
            port: 8082
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        workingDir: /home/argocd
        volumeMounts:
        - name: argocd-home
          mountPath: /home/argocd
        - mountPath: /app/config/controller/tls
          name: argocd-repo-server-tls
        resources:
          {}
      nodeSelector:
        kubernetes.io/arch: arm64
      serviceAccountName: argocd-application-controller
      volumes:
      - emptyDir: {}
        name: argocd-home
      - name: argocd-repo-server-tls
        secret:
          items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
          - key: ca.crt
            path: ca.crt
          optional: true
          secretName: argocd-repo-server-tls
---
# Source: argocd/templates/argocd.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: argocd
spec:
  project: default
  source:
    repoURL: https://github.com/dekokun/crypt-manifest.git
    targetRevision: HEAD
    path: charts/argocd
  destination:
    server: https://kubernetes.default.svc
    namespace: argocd
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
---
# Source: argocd/templates/bitcoin.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: bitcoin
spec:
  project: default
  source:
    repoURL: https://github.com/dekokun/crypt-manifest.git
    targetRevision: HEAD
    path: charts/bitcoin
  destination:
    server: https://kubernetes.default.svc
    namespace: bitcoin
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
---
# Source: argocd/templates/clusterrole.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: clusterrole
spec:
  project: default
  source:
    repoURL: https://github.com/dekokun/crypt-manifest.git
    targetRevision: HEAD
    path: charts/clusterrole
  destination:
    server: https://kubernetes.default.svc
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
---
# Source: argocd/templates/system.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: system
spec:
  project: default
  source:
    repoURL: https://github.com/dekokun/crypt-manifest.git
    targetRevision: HEAD
    path: charts/system
  destination:
    server: https://kubernetes.default.svc
    namespace: kube-system
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
---
# Source: argocd/templates/sealedsecret.yaml
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  annotations:
    sealedsecrets.bitnami.com/cluster-wide: \\"true\\"
  creationTimestamp: null
  name: mackerel
  namespace: argocd
spec:
  encryptedData:
    apikey: AgBgZ0GBBml0Ai2ZClxaNBSV5XeKBdXIVy9KjhWZyW3EhymxXt1fbColjcGqFfI6Ex0NZakCj64zAF2CATAg/t0OmROyg5i0fpqyhyCCSOSoPVaUUG7E3W692+ArgWqrv/yyCQu52OukOIpr8XwSw478aR/jc9LVNFd9ZwCaCQLy7PTZGzAKZl3wazOQ3/vGoIYXppb1r986mwFHMDF9iyH68NHhxkInVungZzDufyQKyFVaKohfL8uR8kQ+YG/libTnN++9mb0Tt51MIC0MkDldbMnLsl63iwboyJ+eK8A2kbD6uajXs362HyJU/IIbLgmJjSKaQUKspuIo9FTB4pjd95YcsEo0MRUYA9lSzaAbXmxR0+eZlvSMJXViGoRi7DGiY8WTjNIuTjFIyZ2nDhlctjxiF0V/vp4YF0sCLa4l72nC3rtuIeQjyp1M7jSXFrUFwrz2o5Gakqgo6QC5cLx4N8/pAD7N8MYOxfaKjj9nxaaE6jGa6a4lNHsdnR7/B8oePOkZJwgd6fOJZvuea1/hngiKPAlxU2noshlXjCjsGfLBEmUNg5/dXz9HHmr77FGgr96Wi177OC5RhcDXR274iBtfVwXTR5ahshpuBQQDYMmuqzVhldckyqO9LatZsiqUY8EclPyUpCwxtuseQPkCLYVbdmqITUEsX3tjlsSkjozt7qPH84Om8RU629DCl5/ZI6/DpnWFYtMzK/7ZSflovIkPpgcVTPWvuMbqLWJKzstXSXE1GODOLx2t0g==
  template:
    data: null
    metadata:
      annotations:
        sealedsecrets.bitnami.com/cluster-wide: \\"true\\"
      creationTimestamp: null
      name: mackerel
      namespace: argocd
"
`;

exports[`snapshot test for k8s manifest ./charts/bitcoin 1`] = `
"---
# Source: bitcoin/templates/configmap.yaml
apiVersion: v1
data:
  bitnodes-script: |
    #!/bin/bash
    
    set -eu
    
    IP=$1
    PORT=$2
    HOSTNAME=$3
    
    HOST_ID=$(mkr hosts --name \\"$HOSTNAME\\" | jq -r '.[0].id')
    (
        leaderboard=$(curl \\"https://bitnodes.io/api/v1/nodes/leaderboard/\${IP}-\${PORT}\\"/ 2>/dev/null)
        timestamp=$(date +%s)
        rank=$(echo \\"$leaderboard\\" | jq '.rank')
        echo  -e \\"bitcoin.bitnodes.rank\\\\t\${rank}\\\\t\${timestamp}\\"
        names=(ai bi dli dui hi mli mui ni nsi peer_index pi si vi wli wui)
        for name in \\"\${names[@]}\\"
        do
          echo  -e \\"bitcoin.bitnodes_score.\${name}\\\\t$(echo \\"$leaderboard\\" | jq -r \\".\${name}\\")\\\\t\${timestamp}\\"
        done
    ) | mkr throw --host \\"$HOST_ID\\"
    
    
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: mackerel
---
# Source: bitcoin/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nlb
  labels:
    app: fullnode
  annotations:
    oci.oraclecloud.com/load-balancer-type: \\"nlb\\"
spec:
  type: LoadBalancer
  ports:
  - port: 8333
  selector:
    app: fullnode
---
# Source: bitcoin/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: bitcoin-fullnode
  labels:
    app: fullnode
  annotations:
    reloader.stakater.com/auto: \\"true\\"
spec:
  serviceName: \\"bitcoin-service\\"
  replicas: 1
  selector:
    matchLabels:
      app: fullnode
  template:
    metadata:
      labels:
        app: fullnode
    spec:
      imagePullSecrets:
      - name: aws-ecr
      containers:
      - name: bitcoin-core
        image: ruimarinho/bitcoin-core:22
        args: [
          \\"-printtoconsole\\",
          \\"-externalip=158.101.139.58\\",
          \\"-dbcache=2000\\",
          \\"-prune=30000\\",
          \\"-rpcallowip=127.0.0.1\\",
          \\"-rpcauth=dekokun:9eee90da9d6874c4d592cfab86e3ecd9$5e70818cf9df9add2a23637abf5da2da57da21f3f5ffe0d02ef3d253c53ff9f3\\"
        ]
        env:
        - name: BITCOIN_DATA
          value: \\"/var/lib/bitcoin\\"
        ports:
        - containerPort: 8333
        volumeMounts:
        - name: bitcoinclaim
          mountPath: /var/lib/bitcoin
        resources:
          requests:
            cpu: 0.512
            memory: 4000Mi
          limits:
            memory: 10000Mi
      - name: mackerel-container-agent
        image: dekokun/mackerel-container-agent-bitcoin:v0.0.5
        resources:
          requests:
            cpu: 0.004
            memory: 17Mi
          limits:
            memory: 128Mi
        env:
        - name: MACKEREL_KUBERNETES_KUBELET_READ_ONLY_PORT
          value: '0'
        - name: MACKEREL_CONTAINER_PLATFORM
          value: kubernetes
        - name: MACKEREL_HOST_STATUS_ON_START
          value: working
        - name: MACKEREL_AGENT_CONFIG
          value: /etc/mackerel/config
        - name: MACKEREL_KUBERNETES_KUBELET_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: MACKEREL_KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MACKEREL_KUBERNETES_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MACKEREL_ROLES
          value: bitcoin:full-node
        - name: MACKEREL_APIKEY
          valueFrom:
            secretKeyRef:
              name: mackerel
              key: apikey
        volumeMounts:
          - mountPath: \\"/etc/mackerel\\"
            name: mackerel-config
            readOnly: true
      terminationGracePeriodSeconds: 60
      volumes:
        - name: mackerel-config
          secret:
            secretName: mackerel
      nodeSelector:
        kubernetes.io/arch: arm64

  volumeClaimTemplates:
  - metadata:
      name: bitcoinclaim
    spec:
      storageClassName: \\"oci-bv\\"
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 50Gi
---
# Source: bitcoin/templates/cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: mackerel-throw-bitnodes-bitcoin-fullnode-0
spec:
  schedule: \\"*/10 * * * *\\"
  startingDeadlineSeconds: 300
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: mkr
            image: dekokun/mackerel-container-agent-bitcoin:v0.0.5
            imagePullPolicy: IfNotPresent
            env:
              - name: MACKEREL_APIKEY
                valueFrom:
                  secretKeyRef:
                    name: mackerel
                    key: apikey
            command:
              - /usr/local/bin/mackerel/bitnodes-script
            args:
              - 158.101.139.58
              - \\"8333\\"
              - bitcoin-fullnode-0
            volumeMounts:
              - name: mackerel-volume
                mountPath: /usr/local/bin/mackerel
          restartPolicy: OnFailure
          volumes:
            - name: mackerel-volume
              configMap:
                name: mackerel
                defaultMode: 0700
          nodeSelector:
            kubernetes.io/arch: arm64
---
# Source: bitcoin/templates/sealedsecret.yaml
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  annotations:
    sealedsecrets.bitnami.com/cluster-wide: \\"true\\"
  creationTimestamp: null
  name: mackerel
spec:
  encryptedData:
    apikey: AgDf21j5HR7v1etkrMrnQSacW42UBuacdyaYSFi4WSkfCF5huh1kDTS9CUQu3HTamNyetsCbbaB6UMSAUzayWYBLsRfP4gfbxdzUjHMhd8Gne6+QaO2rNn0AS6kYTHQCyjmHNg2/hMQrtSI2D64mPdNtPH4ZtpYiCEIbnUTYT3GS5YybqxvtSEgaHMoyttlFj5FXZL9eYf5yULpHe6nDWdP7GRacgcgOG5soaG4vs0df54BJpC2W9deqpdDR9VJJXXyY1tuRz5MHjwJeVlWZEiWo1XTzvs3U4Byi0suGMZ3OhqbXWfQqWNRcKq3XgN8awBh9P/PqmEPehhEuQJgLtni0IoHMtjbNdRInxntkAGz6QrRStQj5Gfy052OW3WyxlZGLPVBoDInjUojZkD/2U6h5lmM7A7tAYYdGzqxjbja0ZWrAps3UlWIOm6mJkKkjOoZPZKiax79R2gy/ZzAfy/K0BEOXUk3s94GYWanWRNnpfUbnyIz4GOH+v5RTknvW8ufQ6dckoMxcE/V3MvFiZtfrOq+txLCzwxqNEaG+etE+NqzliLDOYpcFM12dEKL4RO8AlBmTjKqspaK2corkA5+wvSEfIGeAJ3BTpTCy0OHFngZf7tQ/rgQ3cLGobuLU+gxzkqOeBbfhylMMO4NWIYRq4yXJbiajIMlrY+XHLi7WzYiRIvnv5S3ylJ+Bz6dBCbke/069x8ZvvGkPKh9M939wV9FJ8oyW+4zZ9c1L7CLcXrhmAdsDte7ITJESCw==
    config: AgA0lg36UNUnsSyocdx7EAoYkHo7FOui6VgSRP6vk/r+QXJ4uDsP1d5GfrOreRMkPRADyJXu5UnBR9wEvxsHFXXfw4u/gkrUNRsWDtkXEcW0Hf/u+rDrib496eJev3/98ldGz/u0zH8Be55faxhjV53aez9a5gU4AXk2pOSr/B2FVyj9yowo67rc9H4BcNaEGOs3m3FuIuOGLxwTvRCwhyGIXunjwwGy2+CBLQBNlKcwEGS3o9DSSQeu0OGXCvmEVuY+pgVUC6n9e2g7/OiWG9Pxnhkn20Qw+g9wEOV7mr3MA02cyRlQFXxVDTDZspOED7NwvazhKo8qdtb0hsYm5SX5qTsTWjV1RUla6fN1cgkdSYn0MhcmKuEGoRLc62q/3FCM3u8gU3lGr6dpYlHAp2hUjKiCpRKqVVlLJe3xXHXJSWs30qthQOwCbSmL2PRJDi4JTTgI3B8YMEjQsrBpcv5YfZSYg+V3KMbqHE+eiWMGlZe31juMcSqscMErb8Qj1VUz9nvhA8lqGYMuEX8GC5BZkNyn2uWsXCWibUq8Wh+kbg3PDjsf2sId/NrO9jZNcMk2V6aXo5mbDQUR7d8rR1XGIyDHSTbhWptp9jhKuLbtBsVTglcAZ0/ZTtmnD/Si7PWlBejEfq6ocws2cXlUD3fVBBcxw91xQzUwEQY2qhQgX8D/ren+1zkB8JtfgIY125eHFd890SzliuiOl5QD94vDEvKQh8ZmxEvC4krhdLofLU/+2bFG9FmOmdtmkdTXdT94xsYLK3yk6dcoZCEHP/KWPTLu0YRilrZHEZx2UGqc/cmIztnGRFD8x9IRwziAJAPrvtFicHb8l0csWOy2RI5L59OUW3U1ZlHGdA3JU0ywMEHSXW9aM2E0ZYsVHgb9VTFlKFE+w8TiNiFJ0RAxmMxCUxh0wDiOdx5VwESDej6oOLjZ5FcTfpZXfslTMvtafo81mNd5tdXDc0UX9AGSaYXejkf0nFg0LF1CLRyprx5coH4gDyS2Ouq/HcWfmqJmZBHRpnKHHaho1JHFmZXNqoFY1dljPG13UE0n4dehOD9qlJzHiUxXlKCRQb3vakYf
  template:
    data: null
    metadata:
      annotations:
        sealedsecrets.bitnami.com/cluster-wide: \\"true\\"
      creationTimestamp: null
      name: mackerel
    type: Opaque
"
`;

exports[`snapshot test for k8s manifest ./charts/clusterrole 1`] = `
"---
# Source: clusterrole/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: mackerel-container-agent-clusterrole
rules:
- apiGroups:
  - \\"\\"
  resources:
  - nodes/proxy
  - nodes/stats
  verbs:
  - get
---
# Source: clusterrole/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: bitcoin-with-mackerel-agent-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: mackerel-container-agent-clusterrole
subjects:
- kind: ServiceAccount
  name: default
  namespace: bitcoin
---
# Source: clusterrole/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: bitcoin-with-mackerel-agent-binding-staging
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: mackerel-container-agent-clusterrole
subjects:
- kind: ServiceAccount
  name: default
  namespace: bitcoin-staging
---
# Source: clusterrole/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argocd-with-mackerel-agent-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: mackerel-container-agent-clusterrole
subjects:
- kind: ServiceAccount
  name: default
  namespace: argocd
"
`;

exports[`snapshot test for k8s manifest ./charts/system 1`] = `
"---
# Source: system/charts/metrics-server/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: system-snapshot-test-metrics-server
  labels:
    helm.sh/chart: metrics-server-3.8.2
    app.kubernetes.io/name: metrics-server
    app.kubernetes.io/instance: system-snapshot-test
    app.kubernetes.io/version: \\"0.6.1\\"
    app.kubernetes.io/managed-by: Helm
---
# Source: system/charts/reloader/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    meta.helm.sh/release-namespace: \\"default\\"
    meta.helm.sh/release-name: \\"system-snapshot-test\\"
  labels:
    app: system-snapshot-test-reloader
    chart: \\"reloader-v0.0.117\\"
    release: \\"system-snapshot-test\\"
    heritage: \\"Helm\\"
    app.kubernetes.io/managed-by: \\"Helm\\"
  name: system-snapshot-test-reloader
  namespace: default
---
# Source: system/charts/sealed-secrets/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: system-snapshot-test-sealed-secrets
  namespace: default
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.3.0
    app.kubernetes.io/instance: system-snapshot-test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.18.0
---
# Source: system/charts/metrics-server/templates/clusterrole-aggregated-reader.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:metrics-server-aggregated-reader
  labels:
    helm.sh/chart: metrics-server-3.8.2
    app.kubernetes.io/name: metrics-server
    app.kubernetes.io/instance: system-snapshot-test
    app.kubernetes.io/version: \\"0.6.1\\"
    app.kubernetes.io/managed-by: Helm
    rbac.authorization.k8s.io/aggregate-to-admin: \\"true\\"
    rbac.authorization.k8s.io/aggregate-to-edit: \\"true\\"
    rbac.authorization.k8s.io/aggregate-to-view: \\"true\\"
rules:
  - apiGroups:
      - metrics.k8s.io
    resources:
      - pods
      - nodes
    verbs:
      - get
      - list
      - watch
---
# Source: system/charts/metrics-server/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:system-snapshot-test-metrics-server
  labels:
    helm.sh/chart: metrics-server-3.8.2
    app.kubernetes.io/name: metrics-server
    app.kubernetes.io/instance: system-snapshot-test
    app.kubernetes.io/version: \\"0.6.1\\"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
    - \\"\\"
    resources:
    - nodes/metrics
    verbs:
    - get
  - apiGroups:
    - \\"\\"
    resources:
      - pods
      - nodes
      - namespaces
      - configmaps
    verbs:
      - get
      - list
      - watch
---
# Source: system/charts/reloader/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1

kind: ClusterRole
metadata:
  annotations:
    meta.helm.sh/release-namespace: \\"default\\"
    meta.helm.sh/release-name: \\"system-snapshot-test\\"
  labels:
    app: system-snapshot-test-reloader
    chart: \\"reloader-v0.0.117\\"
    release: \\"system-snapshot-test\\"
    heritage: \\"Helm\\"
    app.kubernetes.io/managed-by: \\"Helm\\"
  name: system-snapshot-test-reloader-role
  namespace: default
rules:
  - apiGroups:
      - \\"\\"
    resources:
      - secrets
      - configmaps
    verbs:
      - list
      - get
      - watch
  - apiGroups:
      - \\"apps\\"
    resources:
      - deployments
      - daemonsets
      - statefulsets
    verbs:
      - list
      - get
      - update
      - patch
  - apiGroups:
      - \\"extensions\\"
    resources:
      - deployments
      - daemonsets
    verbs:
      - list
      - get
      - update
      - patch
---
# Source: system/charts/sealed-secrets/templates/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: secrets-unsealer
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.3.0
    app.kubernetes.io/instance: system-snapshot-test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.18.0
rules:
  - apiGroups:
      - bitnami.com
    resources:
      - sealedsecrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - bitnami.com
    resources:
      - sealedsecrets/status
    verbs:
      - update
  - apiGroups:
      - \\"\\"
    resources:
      - secrets
    verbs:
      - get
      - list
      - create
      - update
      - delete
  - apiGroups:
      - \\"\\"
    resources:
      - events
    verbs:
      - create
      - patch
---
# Source: system/charts/metrics-server/templates/clusterrolebinding-auth-delegator.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system-snapshot-test-metrics-server:system:auth-delegator
  labels:
    helm.sh/chart: metrics-server-3.8.2
    app.kubernetes.io/name: metrics-server
    app.kubernetes.io/instance: system-snapshot-test
    app.kubernetes.io/version: \\"0.6.1\\"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: system-snapshot-test-metrics-server
    namespace: default
---
# Source: system/charts/metrics-server/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:system-snapshot-test-metrics-server
  labels:
    helm.sh/chart: metrics-server-3.8.2
    app.kubernetes.io/name: metrics-server
    app.kubernetes.io/instance: system-snapshot-test
    app.kubernetes.io/version: \\"0.6.1\\"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:system-snapshot-test-metrics-server
subjects:
  - kind: ServiceAccount
    name: system-snapshot-test-metrics-server
    namespace: default
---
# Source: system/charts/reloader/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1

kind: ClusterRoleBinding
metadata:
  annotations:
    meta.helm.sh/release-namespace: \\"default\\"
    meta.helm.sh/release-name: \\"system-snapshot-test\\"
  labels:
    app: system-snapshot-test-reloader
    chart: \\"reloader-v0.0.117\\"
    release: \\"system-snapshot-test\\"
    heritage: \\"Helm\\"
    app.kubernetes.io/managed-by: \\"Helm\\"
  name: system-snapshot-test-reloader-role-binding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system-snapshot-test-reloader-role
subjects:
  - kind: ServiceAccount
    name: system-snapshot-test-reloader
    namespace: default
---
# Source: system/charts/sealed-secrets/templates/cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system-snapshot-test-sealed-secrets
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.3.0
    app.kubernetes.io/instance: system-snapshot-test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.18.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: secrets-unsealer
subjects:
  - apiGroup: \\"\\"
    kind: ServiceAccount
    name: system-snapshot-test-sealed-secrets
    namespace: default
---
# Source: system/charts/sealed-secrets/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: system-snapshot-test-sealed-secrets-key-admin
  namespace: default
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.3.0
    app.kubernetes.io/instance: system-snapshot-test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.18.0
rules:
  - apiGroups:
      - \\"\\"
    resourceNames:
      - sealed-secrets-key
    resources:
      - secrets
    verbs:
      - get
  - apiGroups:
      - \\"\\"
    resources:
      - secrets
    verbs:
      - create
      - list
---
# Source: system/charts/sealed-secrets/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: system-snapshot-test-sealed-secrets-service-proxier
  namespace: default
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.3.0
    app.kubernetes.io/instance: system-snapshot-test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.18.0
rules:
  - apiGroups:
      - \\"\\"
    resourceNames:
      - system-snapshot-test-sealed-secrets
    resources:
      - services
    verbs:
      - get
  - apiGroups:
      - \\"\\"
    resourceNames:
      - 'http:system-snapshot-test-sealed-secrets:'
      - 'http:system-snapshot-test-sealed-secrets:http'
      - system-snapshot-test-sealed-secrets
    resources:
      - services/proxy
    verbs:
      - create
      - get
---
# Source: system/charts/metrics-server/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: system-snapshot-test-metrics-server-auth-reader
  namespace: kube-system
  labels:
    helm.sh/chart: metrics-server-3.8.2
    app.kubernetes.io/name: metrics-server
    app.kubernetes.io/instance: system-snapshot-test
    app.kubernetes.io/version: \\"0.6.1\\"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
  - kind: ServiceAccount
    name: system-snapshot-test-metrics-server
    namespace: default
---
# Source: system/charts/sealed-secrets/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: system-snapshot-test-sealed-secrets-key-admin
  namespace: default
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.3.0
    app.kubernetes.io/instance: system-snapshot-test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.18.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: system-snapshot-test-sealed-secrets-key-admin
subjects:
  - apiGroup: \\"\\"
    kind: ServiceAccount
    name: system-snapshot-test-sealed-secrets
    namespace: default
---
# Source: system/charts/sealed-secrets/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: system-snapshot-test-sealed-secrets-service-proxier
  namespace: default
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.3.0
    app.kubernetes.io/instance: system-snapshot-test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.18.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: system-snapshot-test-sealed-secrets-service-proxier
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:authenticated
---
# Source: system/charts/metrics-server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: system-snapshot-test-metrics-server
  labels:
    helm.sh/chart: metrics-server-3.8.2
    app.kubernetes.io/name: metrics-server
    app.kubernetes.io/instance: system-snapshot-test
    app.kubernetes.io/version: \\"0.6.1\\"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
  selector:
    app.kubernetes.io/name: metrics-server
    app.kubernetes.io/instance: system-snapshot-test
---
# Source: system/charts/sealed-secrets/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: system-snapshot-test-sealed-secrets
  namespace: default
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.3.0
    app.kubernetes.io/instance: system-snapshot-test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.18.0
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      targetPort: http
      nodePort: null
  selector:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/instance: system-snapshot-test
---
# Source: system/charts/metrics-server/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: system-snapshot-test-metrics-server
  labels:
    helm.sh/chart: metrics-server-3.8.2
    app.kubernetes.io/name: metrics-server
    app.kubernetes.io/instance: system-snapshot-test
    app.kubernetes.io/version: \\"0.6.1\\"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: metrics-server
      app.kubernetes.io/instance: system-snapshot-test
  template:
    metadata:
      labels:
        app.kubernetes.io/name: metrics-server
        app.kubernetes.io/instance: system-snapshot-test
    spec:
      serviceAccountName: system-snapshot-test-metrics-server
      priorityClassName: \\"system-cluster-critical\\"
      containers:
        - name: metrics-server
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
          imagePullPolicy: IfNotPresent
          args:
            - --secure-port=4443
            - --cert-dir=/tmp
            - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
            - --kubelet-use-node-status-port
            - --metric-resolution=15s
          ports:
          - name: https
            protocol: TCP
            containerPort: 4443
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: https
              scheme: HTTPS
            initialDelaySeconds: 0
            periodSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 20
            periodSeconds: 10
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: tmp
          emptyDir: {}
---
# Source: system/charts/reloader/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    meta.helm.sh/release-namespace: \\"default\\"
    meta.helm.sh/release-name: \\"system-snapshot-test\\"
  labels:
    app: system-snapshot-test-reloader
    chart: \\"reloader-v0.0.117\\"
    release: \\"system-snapshot-test\\"
    heritage: \\"Helm\\"
    app.kubernetes.io/managed-by: \\"Helm\\"
    group: com.stakater.platform
    provider: stakater
    version: v0.0.117
  name: system-snapshot-test-reloader
  namespace: default
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: system-snapshot-test-reloader
      release: \\"system-snapshot-test\\"
  template:
    metadata:
      labels:
        app: system-snapshot-test-reloader
        chart: \\"reloader-v0.0.117\\"
        release: \\"system-snapshot-test\\"
        heritage: \\"Helm\\"
        app.kubernetes.io/managed-by: \\"Helm\\"
        group: com.stakater.platform
        provider: stakater
        version: v0.0.117
    spec:
      containers:
      - image: \\"stakater/reloader:v0.0.117\\"
        imagePullPolicy: IfNotPresent
        name: system-snapshot-test-reloader

        ports:
        - name: http
          containerPort: 9090
        livenessProbe:
          httpGet:
            path: /metrics
            port: http
          timeoutSeconds: 5
          failureThreshold: 5
          periodSeconds: 10
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /metrics
            port: http
          timeoutSeconds: 5
          failureThreshold: 5
          periodSeconds: 10
          successThreshold: 1
      securityContext: 
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccountName: system-snapshot-test-reloader
---
# Source: system/charts/sealed-secrets/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: system-snapshot-test-sealed-secrets
  namespace: default
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.3.0
    app.kubernetes.io/instance: system-snapshot-test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.18.0
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: sealed-secrets
      app.kubernetes.io/instance: system-snapshot-test
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sealed-secrets
        app.kubernetes.io/instance: system-snapshot-test
    spec:
      securityContext:
        fsGroup: 65534
      serviceAccountName: system-snapshot-test-sealed-secrets
      containers:
        - name: controller
          command:
            - controller
          args:
            - --update-status
            - --key-prefix
            - \\"sealed-secrets-key\\"
          image: docker.io/bitnami/sealed-secrets-controller:v0.18.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: http
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /healthz
              port: http
          resources:
            limits: {}
            requests: {}
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
          volumeMounts:
            - mountPath: /tmp
              name: tmp
      volumes:
        - name: tmp
          emptyDir: {}
---
# Source: system/charts/metrics-server/templates/apiservice.yaml
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1beta1.metrics.k8s.io
  labels:
    helm.sh/chart: metrics-server-3.8.2
    app.kubernetes.io/name: metrics-server
    app.kubernetes.io/instance: system-snapshot-test
    app.kubernetes.io/version: \\"0.6.1\\"
    app.kubernetes.io/managed-by: Helm
spec:
  group: metrics.k8s.io
  groupPriorityMinimum: 100
  insecureSkipTLSVerify: true
  service:
    name: system-snapshot-test-metrics-server
    namespace: default
  version: v1beta1
  versionPriority: 100
"
`;
